library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- Utilisation de NUMERIC_STD pour to_integer et unsigned

entity VGAA is
    port(
        clk       : in  std_logic;
        reset     : in  std_logic;
        hsync     : out std_logic;
        vsync     : out std_logic;
        r         : out std_logic_vector(3 downto 0);  -- Red channel (4 bits)
        g         : out std_logic_vector(3 downto 0);  -- Green channel (4 bits)
        b         : out std_logic_vector(3 downto 0);  -- Blue channel (4 bits)
        switchs   : in  std_logic_vector(3 downto 0);  -- Switches (4 bits) pour contrôler le zoom
        data_in   : in  std_logic_vector(9 downto 0);  -- Données de 10 bits envoyées par l'Arduino
        new_data  : in  std_logic;                      -- Indique quand de nouvelles données arrivent
        stored_data : out std_logic_vector(9 downto 0)  -- Données stockées à afficher
    );
end VGAA;

architecture Behavioral of VGAA is
    signal hpos     : std_logic_vector(9 downto 0);
    signal vpos     : std_logic_vector(9 downto 0);
    signal video_on : std_logic;
    signal pixel_on : std_logic;
    signal grid_scale : integer := 80;  -- Espacement des lignes de grille, ajustable avec les switchs
    signal internal_stored_data : std_logic_vector(9 downto 0); -- Nouveau nom pour stocker les données de l'Arduino

    component vga_sync
        port(
            clk      : in  std_logic;
            reset    : in  std_logic;
            hsync    : out std_logic;
            vsync    : out std_logic;
            hpos     : out std_logic_vector(9 downto 0);
            vpos     : out std_logic_vector(9 downto 0);
            video_on : out std_logic
        );
    end component;

    component vga_display
        port(
            hpos     : in  std_logic_vector(9 downto 0);
            vpos     : in  std_logic_vector(9 downto 0);
            video_on : in  std_logic;
            grid_scale : in integer;      -- Nouveau paramètre pour l'espacement de la grille
            stored_data : in std_logic_vector(9 downto 0); -- Données à afficher
            pixel_on : out std_logic
        );
    end component;

    component DataReceiver is
        Port ( clk        : in  std_logic;
               reset      : in  std_logic;
               data_in    : in  std_logic_vector(9 downto 0);  -- Données de 10 bits
               new_data   : in  std_logic;                      -- Signal indiquant que de nouvelles données sont disponibles
               stored_data : out std_logic_vector(9 downto 0)); -- Données stockées à afficher
    end component;

begin
    -- Instanciation des composants vga_sync et vga_display
    u1: vga_sync port map(clk, reset, hsync, vsync, hpos, vpos, video_on);
    u2: vga_display port map(hpos, vpos, video_on, grid_scale, internal_stored_data, pixel_on);  -- Utilisation du signal interne

    -- Instanciation de DataReceiver
    data_receiver_inst : DataReceiver
        port map ( clk => clk,
                   reset => reset,
                   data_in => data_in,
                   new_data => new_data,
                   stored_data => internal_stored_data);  -- Utilisation du signal interne

    -- Processus pour ajuster la valeur de grid_scale en fonction des switchs
    process(switchs)
    begin
        case switchs is
            when "0000" => grid_scale <= 160;  -- Dézoom maximum
            when "0001" => grid_scale <= 120;  -- Dézoom moyen
            when "0010" => grid_scale <= 80;   -- Échelle par défaut
            when "0011" => grid_scale <= 40;   -- Zoom x2
            when "0100" => grid_scale <= 20;   -- Zoom x4
            when others => grid_scale <= 80;   -- Échelle par défaut
        end case;
    end process;

    -- Assignation de la valeur des couleurs en fonction du signal pixel_on
    process(pixel_on)
    begin
        if pixel_on = '1' then
            r <= "1111";  -- Rouge maximum (15)
            g <= "1111";  -- Vert maximum (15)
            b <= "1111";  -- Bleu maximum (15)
        else
            r <= "0000";  -- Rouge minimum (0)
            g <= "0000";  -- Vert minimum (0)
            b <= "0000";  -- Bleu minimum (0)
        end if;
    end process;

    -- Assignation du signal de sortie stored_data à partir du signal interne
    stored_data <= internal_stored_data;

end Behavioral;
